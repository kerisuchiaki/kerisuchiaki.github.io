<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>kerisuchiaki</title><subtitle>这是通过Chirpy主题配置而成的</subtitle> <updated>2022-10-08T12:07:43+00:00</updated> <author> <name>kerisuchiaki</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 kerisuchiaki </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title></title><link href="/posts/2021-08-07-first-post/" rel="alternate" type="text/html" title="" /><published>2022-10-08T12:07:43+00:00</published> <updated>2022-10-08T12:07:43+00:00</updated> <id>/posts/2021-08-07-first-post/</id> <content src="/posts/2021-08-07-first-post/" /> <author> <name>kerisuchiaki</name> </author> <summary> 我的第一篇博客 //代码片段 int main(){ cout&amp;lt;&amp;lt;"hello world\n"; return 0; } ======= </summary> </entry> <entry><title>Person_boke</title><link href="/posts/person_boke/" rel="alternate" type="text/html" title="Person_boke" /><published>2022-10-08T00:00:00+00:00</published> <updated>2022-10-08T00:00:00+00:00</updated> <id>/posts/person_boke/</id> <content src="/posts/person_boke/" /> <author> <name>kerisuchiaki</name> </author> <summary> 时隔两个月依旧被github pags弄崩溃 服了，太痛苦 </summary> </entry> <entry><title>关于动态规划完全背包问题</title><link href="/posts/learn_note/" rel="alternate" type="text/html" title="关于动态规划完全背包问题" /><published>2022-03-26T02:34:00+00:00</published> <updated>2022-10-08T10:00:05+00:00</updated> <id>/posts/learn_note/</id> <content src="/posts/learn_note/" /> <author> <name>minamichiaki</name> </author> <category term="算法" /> <summary> 动态规划 题目：hdu1028 递推与递归做法 //代码片段 #include&amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int maxn=1e4; int dp[maxn][maxn];//递推表达式dp[n][m]的含义,将n的划分最大数分成不超过m的划分数 /*状态转移方程： dp[i][j]=dp[i][j-1]+dp[i-j][j];(i&amp;gt;j)分治思想，将n的划分最大数分成不超过m的划分数有两种情况： 1，不包含最大数j划分个数为dp[i][j-1], 2.包含最大数j,划分个数为dp[i-j][j](包含指一定包含，所以i要减去J，转化为求子问题dp[i-j[j]) dp[i][j]=dp[i][j-1]+1（i==j)是上述情况的特殊情况，此时,dp[i-j][j]为零，则包含... </summary> </entry> <entry><title>你好，世界！</title><link href="/posts/first_post/" rel="alternate" type="text/html" title="你好，世界！" /><published>2022-03-26T02:34:00+00:00</published> <updated>2022-10-08T10:00:05+00:00</updated> <id>/posts/first_post/</id> <content src="/posts/first_post/" /> <author> <name>湾区书记汤姆</name> </author> <category term="随笔" /> <summary> 感谢关注～ 这里可以放代码片段噢～ //代码片段 hello world #include&amp;lt;bits/stdc++.h&amp;gt; using namespace std; int main(){ cout&amp;lt;&amp;lt;"hello world&amp;lt;&amp;lt;endl; return 0; } int main(){ hello world; } </summary> </entry> <entry><title>你好，世界！</title><link href="/posts/hello-world/" rel="alternate" type="text/html" title="你好，世界！" /><published>2022-03-26T02:34:00+00:00</published> <updated>2022-08-06T16:13:52+00:00</updated> <id>/posts/hello-world/</id> <content src="/posts/hello-world/" /> <author> <name>kerisuchiaki</name> </author> <category term="随笔" /> <summary> 感谢关注～ 这里可以放代码片段噢～ //代码片段 int main(){ cout&amp;lt;&amp;lt;"hello world\n"; // hello world; return 0; } </summary> </entry> </feed>
